# Here are the solutions to the laboratory exercises for Data Structures & Algorithms:

*Experiment 1: Array Operations*

*Solution*
```
#include <stdio.h>

int main() {
    int arr1[10], arr2[10];
    int n, i;

    // Read linear list of items
    printf("Enter the number of items: ");
    scanf("%d", &n);
    printf("Enter the items: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &arr1[i]);
    }

    // Copy contents from one array to another
    for (i = 0; i < n; i++) {
        arr2[i] = arr1[i];
    }

    // Copy contents from one array to another in reverse order
    for (i = 0; i < n; i++) {
        arr2[i] = arr1[n - i - 1];
    }

    // Store numbers from high index to low index
    for (i = 0; i < n; i++) {
        arr2[i] = arr1[n - i - 1];
    }

    // Print contents in normal order and reverse order
    printf("Normal order: ");
    for (i = 0; i < n; i++) {
        printf("%d ", arr1[i]);
    }
    printf("\nReverse order: ");
    for (i = 0; i < n; i++) {
        printf("%d ", arr2[i]);
    }
    printf("\n");

    return 0;
}
```

*Experiment 2: Array of Pointers*

*Solution*
```
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

int main() {
    struct Node** arr;
    int n, i;

    // Read number of nodes
    printf("Enter the number of nodes: ");
    scanf("%d", &n);

    // Create array of pointers
    arr = (struct Node**)malloc(n * sizeof(struct Node*));

    // Create nodes dynamically
    for (i = 0; i < n; i++) {
        arr[i] = (struct Node*)malloc(sizeof(struct Node));
        printf("Enter data for node %d: ", i + 1);
        scanf("%d", &arr[i]->data);
        arr[i]->next = NULL;
    }

    // Print node data
    for (i = 0; i < n; i++) {
        printf("Node %d data: %d\n", i + 1, arr[i]->data);
    }

    // Free memory
    for (i = 0; i < n; i++) {
        free(arr[i]);
    }
    free(arr);

    return 0;
}
```

*Experiment 3: Linear Search and Binary Search*

*Solution*
```
#include <stdio.h>

int linearSearch(int arr[], int n, int target) {
    int i;
    for (i = 0; i < n; i++) {
        if (arr[i] == target) {
            return i;
        }
    }
    return -1;
}

int binarySearch(int arr[], int n, int target) {
    int low = 0, high = n - 1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (arr[mid] == target) {
            return mid;
        } else if (arr[mid] < target) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    return -1;
}

int main() {
    int arr[] = {2, 5, 8, 12, 16, 23, 38, 56, 72, 91};
    int n = sizeof(arr) / sizeof(arr[0]);
    int target;

    printf("Enter the target element: ");
    scanf("%d", &target);

    int linearResult = linearSearch(arr, n, target);
    int binaryResult = binarySearch(arr, n, target);

    printf("Linear Search Result: %d\n", linearResult);
    printf("Binary Search Result: %d\n", binaryResult);

    return 0;
}
```
