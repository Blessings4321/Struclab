Here are the solutions to the object-oriented programming experiments:

*Experiment 1: Complex Number Class*

*complex.h*
```
#ifndef COMPLEX_H
#define COMPLEX_H

class Complex {
private:
    double real;
    double imag;

public:
    Complex(double r = 0, double i = 0);
    Complex operator+(const Complex& c);
    Complex operator*(const Complex& c);
    friend std::ostream& operator<<(std::ostream& os, const Complex& c);
    friend std::istream& operator>>(std::istream& is, Complex& c);
};

#endif  // COMPLEX_H
```

*complex.cpp*
```
#include "complex.h"
#include <iostream>

Complex::Complex(double r, double i) : real(r), imag(i) {}

Complex Complex::operator+(const Complex& c) {
    return Complex(real + c.real, imag + c.imag);
}

Complex Complex::operator*(const Complex& c) {
    return Complex(real * c.real - imag * c.imag, real * c.imag + imag * c.real);
}

std::ostream& operator<<(std::ostream& os, const Complex& c) {
    os << c.real << " + " << c.imag << "i";
    return os;
}

std::istream& operator>>(std::istream& is, Complex& c) {
    is >> c.real >> c.imag;
    return is;
}
```

*main.cpp*
```
#include "complex.h"
#include <iostream>

int main() {
    Complex c1(3, 4);
    Complex c2(2, 1);

    Complex sum = c1 + c2;
    Complex product = c1 * c2;

    std::cout << "Sum: " << sum << std::endl;
    std::cout << "Product: " << product << std::endl;

    return 0;
}
```

*Experiment 2: Quadratic Polynomial Class*

*quadratic.h*
```
#ifndef QUADRATIC_H
#define QUADRATIC_H

class Quadratic {
private:
    double a;
    double b;
    double c;

public:
    Quadratic(double a = 0, double b = 0, double c = 0);
    Quadratic operator+(const Quadratic& q);
    friend std::ostream& operator<<(std::ostream& os, const Quadratic& q);
    friend std::istream& operator>>(std::istream& is, Quadratic& q);
    double eval(double x);
    void solve(double& x1, double& x2);
};

#endif  // QUADRATIC_H
```

*quadratic.cpp*
```
#include "quadratic.h"
#include <iostream>
#include <cmath>

Quadratic::Quadratic(double a, double b, double c) : a(a), b(b), c(c) {}

Quadratic Quadratic::operator+(const Quadratic& q) {
    return Quadratic(a + q.a, b + q.b, c + q.c);
}

std::ostream& operator<<(std::ostream& os, const Quadratic& q) {
    os << q.a << "x^2 + " << q.b << "x + " << q.c;
    return os;
}

std::istream& operator>>(std::istream& is, Quadratic& q) {
    is >> q.a >> q.b >> q.c;
    return is;
}

double Quadratic::eval(double x) {
    return a * x * x + b * x + c;
}

void Quadratic::solve(double& x1, double& x2) {
    double d = b * b - 4 * a * c;
    if (d < 0) {
        std::cerr << "No real solutions." << std::endl;
        exit(1);
    }
    x1 = (-b + sqrt(d)) / (2 * a);
    x2 = (-b - sqrt(d)) / (2 * a);
}
```

*main.cpp*
```
#include "quadratic.h"
#include <iostream>

int main() {
    Quadratic q(1, -3, 2);

    std::cout << "Quadratic: " << q << std::endl;

    double x1, x2;
    q.solve(x1, x2);

    std::cout << "Solutions: " << x1 << ", " << x2 << std::endl;

    return 0;
}
```
